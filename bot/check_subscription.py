import os
from aiogram import types
from telethon import TelegramClient
from telethon.errors import ChatAdminRequiredError
from telethon.tl.functions.channels import GetParticipantRequest
from telethon.tl.types import ChannelParticipantsSearch
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from db.sessions import get_db
from db.models import TelegramSession

async def check_subscription(message: types.Message):
    """ üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –∫–∞–Ω–∞–ª """
    group_link = message.text.strip()

    async for db in get_db():
        sessions = await db.execute(select(TelegramSession))
        sessions = sessions.scalars().all()

        if not sessions:
            await message.answer("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        results = []
        for session in sessions:
            try:
                session_file_path = os.path.join("sessions/", session.session_file)
                client = TelegramClient(session_file_path, session.api_id, session.api_hash)
                await client.connect()

                if not await client.is_user_authorized():
                    await message.answer(f"üö´ –ê–∫–∫–∞—É–Ω—Ç {session.user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
                    continue

                participant = await client(GetParticipantRequest(group_link, session.user_id))
                results.append(f"‚úÖ **{session.user_id}** –ø–æ–¥–ø–∏—Å–∞–Ω")

            except ChatAdminRequiredError:
                results.append(f"üö´ **{session.user_id}** –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
            except Exception as e:
                results.append(f"‚ö† –û—à–∏–±–∫–∞ —É **{session.user_id}**: {e}")

        await message.answer("\n".join(results))
