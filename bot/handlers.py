from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from bot.session_manager import request_api_id, list_sessions
from bot.join import join_group
from bot.unsubscribe import show_unsubscribe_info, unsubscribe_group
from bot.check_subscription import check_subscription
from bot.spam import start_spam
from bot.logger import logger
import random
import asyncio
from bot.admin_panel import router as admin_router

router = Router()

class BotStates(StatesGroup):
    waiting_for_subscription_link = State()
    waiting_for_subscription_interval_range = State()
    waiting_for_unsubscription_link = State()
    waiting_for_unsubscribe_interval_range = State()
    waiting_for_unsubscribe_count = State()
    waiting_for_randomization_choice = State()
    waiting_for_random_range = State()
    waiting_for_check_subscription_link = State()
    waiting_for_spam_message = State()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é"), KeyboardButton(text="üìÇ –ú–æ–∏ —Å–µ—Å—Å–∏–∏")],
        [KeyboardButton(text="üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É"), KeyboardButton(text="üö´ –í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã")],
        [KeyboardButton(text="üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), KeyboardButton(text="üì® –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")],[KeyboardButton(text="üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏")]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
    logger.info(f"üë§ {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é")

@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
async def request_session_creation(message: types.Message, state: FSMContext):
    await state.clear()
    await request_api_id(message, state)

@router.message(F.text == "üìÇ –ú–æ–∏ —Å–µ—Å—Å–∏–∏")
async def show_sessions(message: types.Message):
    await list_sessions(message)

@router.message(F.text == "üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É")
async def request_group_join(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(BotStates.waiting_for_subscription_link)
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:")

@router.message(StateFilter(BotStates.waiting_for_subscription_link))
async def process_group_join(message: types.Message, state: FSMContext):
    group_link = message.text.strip()
    await state.update_data(group_link=group_link)
    await state.set_state(BotStates.waiting_for_subscription_interval_range)
    await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ '–º–∏–Ω-–º–∞—Ö', –≤ –º–∏–Ω—É—Ç–∞—Ö):")

@router.message(StateFilter(BotStates.waiting_for_subscription_interval_range))
async def process_subscription_interval_range(message: types.Message, state: FSMContext):
    try:
        min_interval, max_interval = map(int, message.text.split('-'))
        if min_interval > max_interval:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–º–∏–Ω-–º–∞—Ö', –≥–¥–µ –º–∏–Ω <= –º–∞—Ö.")
        return
    data = await state.get_data()
    group_link = data.get("group_link")
    interval = random.randint(min_interval, max_interval) * 60  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    await join_group(message, group_link=group_link, interval=interval)
    await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {group_link} –∑–∞–ø—É—â–µ–Ω–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval // 60} –º–∏–Ω—É—Ç (—Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞).")
    await state.clear()

@router.message(F.text == "üö´ –í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã")
async def request_group_leave(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(BotStates.waiting_for_unsubscription_link)
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:")

@router.message(StateFilter(BotStates.waiting_for_unsubscription_link))
async def process_unsubscribe_link(message: types.Message, state: FSMContext):
    group_link = message.text.strip()
    await state.update_data(group_link=group_link)
    await show_unsubscribe_info(message)
    await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –æ—Ç–ø–∏—Å–∫–∞–º–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ '–º–∏–Ω-–º–∞—Ö', –≤ –º–∏–Ω—É—Ç–∞—Ö):")
    await state.set_state(BotStates.waiting_for_unsubscribe_interval_range)

@router.message(StateFilter(BotStates.waiting_for_unsubscribe_interval_range))
async def process_unsubscribe_interval_range(message: types.Message, state: FSMContext):
    try:
        min_interval, max_interval = map(int, message.text.split('-'))
        if min_interval > max_interval:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–º–∏–Ω-–º–∞—Ö', –≥–¥–µ –º–∏–Ω ‚â§ –º–∞—Ö.")
        return

    interval = random.randint(min_interval, max_interval) * 60  # –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–µ–∫—É–Ω–¥—ã
    await state.update_data(interval=interval)
    await message.answer("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:")
    await state.set_state(BotStates.waiting_for_unsubscribe_count)

@router.message(StateFilter(BotStates.waiting_for_unsubscribe_count))
async def process_unsubscribe_count(message: types.Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        return

    data = await state.get_data()
    group_link = data.get("group_link")
    interval = data.get("interval")

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏ –±–µ–∑ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
    await unsubscribe_group(message, count, interval, randomize=False, random_range=0, group_link=group_link)
    await message.answer(f"‚úÖ –û—Ç–ø–∏—Å–∞–Ω–æ {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç –≥—Ä—É–ø–ø—ã {group_link}.")
    await state.clear()



@router.message(F.text == "üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def request_check_subscription(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(BotStates.waiting_for_check_subscription_link)
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:")

@router.message(StateFilter(BotStates.waiting_for_check_subscription_link))
async def process_check_subscription(message: types.Message, state: FSMContext):
    group_link = message.text.strip()
    await check_subscription(message, group_link)
    await state.clear()

@router.message(F.text == "üì® –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_spam_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(BotStates.waiting_for_spam_message)
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

@router.message(StateFilter(BotStates.waiting_for_spam_message))
async def process_spam_message(message: types.Message, state: FSMContext):
    await start_spam(message, message.text.strip())
    await state.clear()
