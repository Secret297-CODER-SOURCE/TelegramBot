import re
from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeExpiredError,FloodWaitError,PhoneNumberInvalidError
from sqlalchemy import select
from db.sessions import get_db
from db.models import TelegramSession, User
from bot.logger import logger
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()
UPLOAD_PATH = "sessions/"
os.makedirs(UPLOAD_PATH, exist_ok=True)

class SessionStates(StatesGroup):
    waiting_for_api_id = State()
    waiting_for_api_hash = State()
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()

async def request_api_id(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(SessionStates.waiting_for_api_id)
    await message.answer(
        "üìå –ü–æ–ª—É—á–∏—Ç—å API ID –∏ API HASH –º–æ–∂–Ω–æ —Ç—É—Ç:\n"
        "üîó [My Telegram Apps](https://my.telegram.org/apps)\n\n"
        "‚úè –í–≤–µ–¥–∏—Ç–µ API ID:"
    )

@router.message(StateFilter(SessionStates.waiting_for_api_id))
async def get_api_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API ID (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).")
        return
    await state.update_data(api_id=int(message.text.strip()))
    await state.set_state(SessionStates.waiting_for_api_hash)
    await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ API HASH:")

@router.message(StateFilter(SessionStates.waiting_for_api_hash))
async def get_api_hash(message: types.Message, state: FSMContext):
    await state.update_data(api_hash=message.text.strip())
    await state.set_state(SessionStates.waiting_for_phone)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@router.message(StateFilter(SessionStates.waiting_for_phone))
async def get_phone_number(message: types.Message, state: FSMContext):
    """ üîπ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —Å –∫–æ–¥–æ–º """
    phone = message.text.strip()
    if not phone.startswith("+") or not phone[1:].isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å `+`).")
        return

    await state.update_data(phone=phone)
    data = await state.get_data()
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    session_name = f"{phone.replace('+', '')}.session"
    session_path = os.path.join(UPLOAD_PATH, session_name)

    client = TelegramClient(session_path, api_id, api_hash)

    try:
        await client.connect()
        if not await client.is_user_authorized():
            logger.info(f"üì® –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ {phone}...")

            sent = await client.send_code_request(phone)

            if not sent.phone_code_hash:
                raise Exception("Telegram –Ω–µ –≤–µ—Ä–Ω—É–ª `phone_code_hash`, –∫–æ–¥ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

            await state.update_data(phone_code_hash=sent.phone_code_hash)
            await state.set_state(SessionStates.waiting_for_code)
            await message.answer("üì® –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")
            logger.info(f"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}")

        else:
            await message.answer("‚úÖ –°–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!")
            await client.disconnect()
            await state.clear()

    except FloodWaitError as e:
        await message.answer(f"‚è≥ Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {e.seconds} —Å–µ–∫—É–Ω–¥.")
        logger.warning(f"‚ùå FloodWaitError: {e}")

    except PhoneNumberInvalidError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.")
        await state.clear()


@router.message(StateFilter(SessionStates.waiting_for_code))
async def verify_code(message: types.Message, state: FSMContext):
    """ üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è) """
    data = await state.get_data()

    if "phone_code_hash" not in data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç phone_code_hash. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    phone = data["phone"]
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    phone_code_hash = data["phone_code_hash"]
    session_file = f"{phone.replace('+', '')}.session"
    session_path = os.path.join(UPLOAD_PATH, session_file)

    client = TelegramClient(session_path, api_id, api_hash)
    await client.connect()

    try:
        logger.info(f"üì® –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: phone={phone}, code={message.text.strip()}, phone_code_hash={phone_code_hash}")

        await client.sign_in(phone, code=message.text.strip(), phone_code_hash=phone_code_hash)
        await message.answer("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

        async for db in get_db():
            user = await db.execute(select(User).where(User.id == message.from_user.id))
            user = user.scalars().first()

            # ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
            if not user:
                new_user = User(id=message.from_user.id, telegram_id=message.from_user.id)
                db.add(new_user)
                await db.commit()
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: {message.from_user.id}")
            session = TelegramSession(
                user_id=message.from_user.id,
                session_file=session_file,
                api_id=api_id,
                api_hash=api_hash
            )
            db.add(session)
            await db.commit()

        logger.info(f"üîπ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {phone}")
        await state.clear()

    except SessionPasswordNeededError:
        """ üîπ –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å ‚Äì –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
        await state.set_state(SessionStates.waiting_for_password)
        await message.answer("üîí –ê–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â—ë–Ω –ø–∞—Ä–æ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥.")
        await state.clear()

    finally:
        await client.disconnect()

@router.message(StateFilter(SessionStates.waiting_for_password))
async def get_password(message: types.Message, state: FSMContext):
    """ üîπ –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é """
    data = await state.get_data()
    phone = data["phone"]
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    session_path = os.path.join(UPLOAD_PATH, f"{phone.replace('+', '')}.session")

    client = TelegramClient(session_path, api_id, api_hash)

    try:
        await client.connect()
        await client.sign_in(password=message.text.strip())
        await message.answer("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (—Å –ø–∞—Ä–æ–ª–µ–º)!")

        async for db in get_db():
            session = TelegramSession(
                user_id=message.from_user.id,
                session_file=f"{phone.replace('+', '')}.session",
                api_id=api_id,
                api_hash=api_hash
            )
            db.add(session)
            await db.commit()

        logger.info(f"üîπ –°–µ—Å—Å–∏—è —Å –ø–∞—Ä–æ–ª–µ–º —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {phone}")
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()


# ================== üîπ –ü–†–û–°–ú–û–¢–† –ò –£–î–ê–õ–ï–ù–ò–ï –°–ï–°–°–ò–ô üîπ ==================

async def list_sessions(message: types.Message):
    """ üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    async for db in get_db():
        sessions = await db.execute(select(TelegramSession).where(TelegramSession.user_id == message.from_user.id))
        sessions = sessions.scalars().all()

    if not sessions:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
        return

    text = "üìÇ *–í–∞—à–∏ —Å–µ—Å—Å–∏–∏:*\n\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for session in sessions:
        session_name = session.session_file.replace(".session", "")  # –£–±–∏—Ä–∞–µ–º ".session"
        session_path = f"sessions/{session.session_file}"  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏

        # –ü–æ–ª—É—á–∞–µ–º username Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Telethon
        try:
            client = TelegramClient(session_path, session.api_id, session.api_hash)
            await client.connect()

            if not await client.is_user_authorized():
                user_display = "üîí [–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞]"
            else:
                me = await client.get_me()
                user_display = f"(@{me.username})" if me.username else f"(ID: {me.id})"

            await client.disconnect()
        except Exception as e:
            user_display = "‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"

        text += f"üîπ {session_name} {user_display}\n"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {session_name}", callback_data=f"delete_session:{session.session_file}")
        ])

    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(lambda c: c.data.startswith("delete_session:"))
async def delete_session(callback: types.CallbackQuery):
    """ üîπ –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é """
    session_file = callback.data.split(":")[1]
    async for db in get_db():
        session = await db.execute(select(TelegramSession).where(
            TelegramSession.user_id == callback.from_user.id,
            TelegramSession.session_file == session_file
        ))
        session = session.scalars().first()

        if not session:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        await db.delete(session)
        await db.commit()

        session_path = f"sessions/{session_file}"
        if os.path.exists(session_path):
            os.remove(session_path)

    await callback.message.answer(f"‚úÖ –°–µ—Å—Å–∏—è {session_file} —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()