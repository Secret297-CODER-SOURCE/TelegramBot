import os
import re
import asyncio
from aiogram import Router, types
from telethon import TelegramClient
from telethon.errors import (
    FloodWaitError, UserNotParticipantError, UserBannedInChannelError,
    AuthKeyUnregisteredError, ChatWriteForbiddenError, ChannelPrivateError
)
from telethon.tl.functions.channels import LeaveChannelRequest
from telethon.tl.functions.messages import CheckChatInviteRequest
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from db.sessions import get_db
from db.models import TelegramSession
from bot.logger import logger

router = Router()
SESSIONS_PATH = "sessions/"

# üîπ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç `+invite_link`)
VALID_LINK_REGEX = re.compile(r"https://t\.me/[\w+]+")


def extract_link(message: types.Message):
    """ üîç –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞, –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ """
    link = None

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text:
        link = message.text.strip()

    # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif message.reply_to_message and message.reply_to_message.text:
        link = message.reply_to_message.text.strip()

    # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä)
    elif message.entities:
        for entity in message.entities:
            if entity.type == "url":
                link = message.text[entity.offset:entity.offset + entity.length]

    # –£–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä —Ç–∏–ø–∞ ?start=...
    if link:
        link = re.sub(r"\?.*", "", link)

    return link if link and VALID_LINK_REGEX.match(link) else None


async def unsubscribe_group(message: types.Message):
    """ üö´ –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥—Ä—É–ø–ø—ã) """
    group_link = extract_link(message)

    if not group_link:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ **–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é** —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–≥—Ä—É–ø–ø—É (–ø—Ä–∏–º–µ—Ä: https://t.me/example_channel –∏–ª–∏ https://t.me/+invite_link)")
        return

    await message.answer(f"üîç –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç {group_link}...")

    successful_unsubs = 0
    failed_unsubs = 0

    async for db in get_db():
        sessions = await db.execute(select(TelegramSession))
        sessions = sessions.scalars().all()

        if not sessions:
            await message.answer("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.")
            return

        for session in sessions:
            try:
                session_file_path = os.path.join(SESSIONS_PATH, session.session_file)

                if not os.path.exists(session_file_path):
                    failed_unsubs += 1
                    await message.answer(f"üö´ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ `{session.session_file}` –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                client = TelegramClient(session_file_path, session.api_id, session.api_hash)
                await client.connect()

                if not await client.is_user_authorized():
                    try:
                        logger.warning(f"üîÑ –ê–∫–∫–∞—É–Ω—Ç {session.user_id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                        await client.start()
                    except AuthKeyUnregisteredError:
                        failed_unsubs += 1
                        await db.execute(
                            TelegramSession.__table__.delete().where(TelegramSession.user_id == session.user_id))
                        await db.commit()
                        await message.answer(f"üö´ –°–µ—Å—Å–∏—è `{session.session_file}` —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã.")
                        await client.disconnect()
                        continue

                # üî• –ü–æ–ª—É—á–∞–µ–º username –∞–∫–∫–∞—É–Ω—Ç–∞
                try:
                    user = await client.get_me()
                    username = user.username if user.username else user.first_name
                except Exception as e:
                    logger.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username: {e}")
                    username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

                # üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞, –∑–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª
                try:
                    if "/+" in group_link:  # üî• –ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
                        invite_hash = group_link.split("/+")[-1]
                        invite_info = await client(CheckChatInviteRequest(invite_hash))
                        if invite_info.chat:
                            group_id = invite_info.chat.id
                        else:
                            raise ChannelPrivateError("–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É")

                    else:  # üî• –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
                        group_id = group_link

                    # üö´ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞
                    try:
                        await client(LeaveChannelRequest(group_id))
                        successful_unsubs += 1
                        await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç **{username}** –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {group_link}")

                    except UserNotParticipantError:
                        await message.answer(f"‚Ñπ **{username}** –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ {group_link}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")

                except ChannelPrivateError:
                    failed_unsubs += 1
                    await message.answer(
                        f"üö´ **{username}** –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {group_link}, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

                except UserBannedInChannelError:
                    failed_unsubs += 1
                    await message.answer(f"üö´ **{username}** –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {group_link}, –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.")

                except ChatWriteForbiddenError:
                    failed_unsubs += 1
                    await message.answer(f"üö´ **{username}** –Ω–µ –º–æ–∂–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ {group_link}.")

                except FloodWaitError as e:
                    await message.answer(
                        f"‚ö† **Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤—ã—Ö–æ–¥ –¥–ª—è {username}.** –ñ–¥—ë–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(e.seconds)

                finally:
                    await client.disconnect()
                    await asyncio.sleep(5)  # –ù–µ–º–Ω–æ–≥–æ –∂–¥—ë–º –º–µ–∂–¥—É –æ—Ç–ø–∏—Å–∫–∞–º–∏

            except Exception as e:
                failed_unsubs += 1
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É –∞–∫–∫–∞—É–Ω—Ç–∞ {session.user_id}: {e}")

    await message.answer(f"üìä –û—Ç–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                         f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_unsubs}\n"
                         f"‚ùå –û—à–∏–±–∫–∏: {failed_unsubs}")
